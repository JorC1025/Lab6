
Lab 6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008a  00800100  00000340  000003d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000340  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  0080018a  0080018a  0000045e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000045e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000490  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000004d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a67  00000000  00000000  00000530  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000747  00000000  00000000  00000f97  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003c3  00000000  00000000  000016de  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000154  00000000  00000000  00001aa4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003d4  00000000  00000000  00001bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002b7  00000000  00000000  00001fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00002283  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 bc 00 	jmp	0x178	; 0x178 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 0c 01 	jmp	0x218	; 0x218 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e4       	ldi	r30, 0x40	; 64
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 38       	cpi	r26, 0x8A	; 138
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e8       	ldi	r26, 0x8A	; 138
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 38       	cpi	r26, 0x8B	; 139
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ae 00 	call	0x15c	; 0x15c <main>
  9e:	0c 94 9e 01 	jmp	0x33c	; 0x33c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initUAT>:
}

void initUAT(){
	//Se usa PD0 y PD1
	//Mirar el pinout
	DDRD |= (1<<DDD1);
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	82 60       	ori	r24, 0x02	; 2
  aa:	8a b9       	out	0x0a, r24	; 10
	DDRD &=~ (1<<DDD0);
  ac:	8a b1       	in	r24, 0x0a	; 10
  ae:	8e 7f       	andi	r24, 0xFE	; 254
  b0:	8a b9       	out	0x0a, r24	; 10
	
	//Configurar UCS0A
	UCSR0A = 0;
  b2:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	
	UCSR0B = (1<<RXCIE0) | (1<<RXEN0) | (1<<TXEN0);
  b6:	88 e9       	ldi	r24, 0x98	; 152
  b8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	
	UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);
  bc:	86 e0       	ldi	r24, 0x06	; 6
  be:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	
	//Se configura baud rate
	UBRR0 = 103; //9615 @ 16MHz
  c2:	87 e6       	ldi	r24, 0x67	; 103
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  ca:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  ce:	08 95       	ret

000000d0 <writeChar>:
}

void writeChar(char caracter){

	
	while ((UCSR0A & (1<<UDRE0))==0);
  d0:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  d4:	95 ff       	sbrs	r25, 5
  d6:	fc cf       	rjmp	.-8      	; 0xd0 <writeChar>
	UDR0 = caracter;
  d8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  dc:	08 95       	ret

000000de <writeString>:

	
	
}

void writeString(char* texto){ //Funcion de escribir string
  de:	0f 93       	push	r16
  e0:	1f 93       	push	r17
  e2:	cf 93       	push	r28
  e4:	8c 01       	movw	r16, r24
	
	for (uint8_t i =0; *(texto+i)!='\0'; i++)
  e6:	c0 e0       	ldi	r28, 0x00	; 0
  e8:	03 c0       	rjmp	.+6      	; 0xf0 <writeString+0x12>
	{
		writeChar(*(texto+i));
  ea:	0e 94 68 00 	call	0xd0	; 0xd0 <writeChar>
	
}

void writeString(char* texto){ //Funcion de escribir string
	
	for (uint8_t i =0; *(texto+i)!='\0'; i++)
  ee:	cf 5f       	subi	r28, 0xFF	; 255
  f0:	f8 01       	movw	r30, r16
  f2:	ec 0f       	add	r30, r28
  f4:	f1 1d       	adc	r31, r1
  f6:	80 81       	ld	r24, Z
  f8:	81 11       	cpse	r24, r1
  fa:	f7 cf       	rjmp	.-18     	; 0xea <writeString+0xc>
	{
		writeChar(*(texto+i));
	}
	
}
  fc:	cf 91       	pop	r28
  fe:	1f 91       	pop	r17
 100:	0f 91       	pop	r16
 102:	08 95       	ret

00000104 <initADC>:

void initADC(){ //Setup de canales adc
	
	
	ADMUX = 0;
 104:	ec e7       	ldi	r30, 0x7C	; 124
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	10 82       	st	Z, r1
	ADMUX = (1 << REFS0) | (1 << ADLAR) | (1 << MUX2);
 10a:	84 e6       	ldi	r24, 0x64	; 100
 10c:	80 83       	st	Z, r24

	
	ADCSRA = 0;
 10e:	ea e7       	ldi	r30, 0x7A	; 122
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	10 82       	st	Z, r1
	ADCSRA |= (1 << ADPS1) |(1<<ADPS0) | (1<< ADEN) | (1<<ADIE);
 114:	80 81       	ld	r24, Z
 116:	8b 68       	ori	r24, 0x8B	; 139
 118:	80 83       	st	Z, r24
 11a:	08 95       	ret

0000011c <setup>:
		}
	}
}

void setup(){
	cli();
 11c:	f8 94       	cli

	//UBRR en 103
	DDRC &= ~(1<<DDC4);
 11e:	87 b1       	in	r24, 0x07	; 7
 120:	8f 7e       	andi	r24, 0xEF	; 239
 122:	87 b9       	out	0x07, r24	; 7
	DDRC |= (1 << DDC1);
 124:	87 b1       	in	r24, 0x07	; 7
 126:	82 60       	ori	r24, 0x02	; 2
 128:	87 b9       	out	0x07, r24	; 7
	DDRC |= (1 << DDC0);
 12a:	87 b1       	in	r24, 0x07	; 7
 12c:	81 60       	ori	r24, 0x01	; 1
 12e:	87 b9       	out	0x07, r24	; 7
	initUAT();
 130:	0e 94 53 00 	call	0xa6	; 0xa6 <initUAT>
	initADC();
 134:	0e 94 82 00 	call	0x104	; 0x104 <initADC>
		DDRB = 0xFF;
 138:	8f ef       	ldi	r24, 0xFF	; 255
 13a:	84 b9       	out	0x04, r24	; 4
		PORTB = 0x00;
 13c:	15 b8       	out	0x05, r1	; 5
	
	
	sei();
 13e:	78 94       	sei
 140:	08 95       	ret

00000142 <mostarMenu>:
	
}

void mostarMenu(){ //Funcion que permite mostrar el menu al usuario al reninciar la pregunta
	
				writeString("Que desea hacer?\n");
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	91 e0       	ldi	r25, 0x01	; 1
 146:	0e 94 6f 00 	call	0xde	; 0xde <writeString>
				
				writeString("Leer Potenciometro: \n");
 14a:	83 e1       	ldi	r24, 0x13	; 19
 14c:	91 e0       	ldi	r25, 0x01	; 1
 14e:	0e 94 6f 00 	call	0xde	; 0xde <writeString>
				writeString("Enviar ASCII \n");
 152:	89 e2       	ldi	r24, 0x29	; 41
 154:	91 e0       	ldi	r25, 0x01	; 1
 156:	0e 94 6f 00 	call	0xde	; 0xde <writeString>
 15a:	08 95       	ret

0000015c <main>:
volatile char modo = '0';
uint8_t valor_adc = 0;

int main(void)
{
	setup();
 15c:	0e 94 8e 00 	call	0x11c	; 0x11c <setup>
	mostarMenu();
 160:	0e 94 a1 00 	call	0x142	; 0x142 <mostarMenu>



	while (1)
	{
		if (modo == '1')
 164:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 168:	81 33       	cpi	r24, 0x31	; 49
 16a:	e1 f7       	brne	.-8      	; 0x164 <main+0x8>
		{
			ADCSRA |= (1<<ADSC);
 16c:	ea e7       	ldi	r30, 0x7A	; 122
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	80 81       	ld	r24, Z
 172:	80 64       	ori	r24, 0x40	; 64
 174:	80 83       	st	Z, r24
 176:	f6 cf       	rjmp	.-20     	; 0x164 <main+0x8>

00000178 <__vector_18>:
	while ((UCSR0A & (1<<UDRE0))==0);
	UDR0 = caracter;
	
}

ISR (USART_RX_vect){
 178:	1f 92       	push	r1
 17a:	0f 92       	push	r0
 17c:	0f b6       	in	r0, 0x3f	; 63
 17e:	0f 92       	push	r0
 180:	11 24       	eor	r1, r1
 182:	2f 93       	push	r18
 184:	3f 93       	push	r19
 186:	4f 93       	push	r20
 188:	5f 93       	push	r21
 18a:	6f 93       	push	r22
 18c:	7f 93       	push	r23
 18e:	8f 93       	push	r24
 190:	9f 93       	push	r25
 192:	af 93       	push	r26
 194:	bf 93       	push	r27
 196:	ef 93       	push	r30
 198:	ff 93       	push	r31
	char dato_recibido = UDR0;
 19a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

	if (modo == '0')
 19e:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1a2:	90 33       	cpi	r25, 0x30	; 48
 1a4:	c9 f4       	brne	.+50     	; 0x1d8 <__vector_18+0x60>
	{
		if (dato_recibido == '1')
 1a6:	81 33       	cpi	r24, 0x31	; 49
 1a8:	39 f4       	brne	.+14     	; 0x1b8 <__vector_18+0x40>
		{
			modo = '1';
 1aa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			writeString("Potenciometro Seleccionado \n");
 1ae:	88 e3       	ldi	r24, 0x38	; 56
 1b0:	91 e0       	ldi	r25, 0x01	; 1
 1b2:	0e 94 6f 00 	call	0xde	; 0xde <writeString>
 1b6:	1f c0       	rjmp	.+62     	; 0x1f6 <__vector_18+0x7e>
		}
		else if (dato_recibido == '2')
 1b8:	82 33       	cpi	r24, 0x32	; 50
 1ba:	39 f4       	brne	.+14     	; 0x1ca <__vector_18+0x52>
		{
			modo = '2';
 1bc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			writeString("ASCII seleccionado \n");
 1c0:	85 e5       	ldi	r24, 0x55	; 85
 1c2:	91 e0       	ldi	r25, 0x01	; 1
 1c4:	0e 94 6f 00 	call	0xde	; 0xde <writeString>
 1c8:	16 c0       	rjmp	.+44     	; 0x1f6 <__vector_18+0x7e>
		}
		
		else { //Programacion defensiva, y reinicio de pregunta despues de mostrar el error
		writeString("Opcion no valida \n");
 1ca:	8a e6       	ldi	r24, 0x6A	; 106
 1cc:	91 e0       	ldi	r25, 0x01	; 1
 1ce:	0e 94 6f 00 	call	0xde	; 0xde <writeString>
		mostarMenu();
 1d2:	0e 94 a1 00 	call	0x142	; 0x142 <mostarMenu>
 1d6:	0f c0       	rjmp	.+30     	; 0x1f6 <__vector_18+0x7e>
		}		
				
	}
	
		else if (modo == '2') //Mostar ASCII y reiniciar pregunta
 1d8:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1dc:	92 33       	cpi	r25, 0x32	; 50
 1de:	59 f4       	brne	.+22     	; 0x1f6 <__vector_18+0x7e>
		{
			PORTB = dato_recibido;
 1e0:	85 b9       	out	0x05, r24	; 5
			PORTC = (dato_recibido >> 6);
 1e2:	82 95       	swap	r24
 1e4:	86 95       	lsr	r24
 1e6:	86 95       	lsr	r24
 1e8:	83 70       	andi	r24, 0x03	; 3
 1ea:	88 b9       	out	0x08, r24	; 8
			
			modo = '0';
 1ec:	80 e3       	ldi	r24, 0x30	; 48
 1ee:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			mostarMenu();
 1f2:	0e 94 a1 00 	call	0x142	; 0x142 <mostarMenu>
		


	
	
}
 1f6:	ff 91       	pop	r31
 1f8:	ef 91       	pop	r30
 1fa:	bf 91       	pop	r27
 1fc:	af 91       	pop	r26
 1fe:	9f 91       	pop	r25
 200:	8f 91       	pop	r24
 202:	7f 91       	pop	r23
 204:	6f 91       	pop	r22
 206:	5f 91       	pop	r21
 208:	4f 91       	pop	r20
 20a:	3f 91       	pop	r19
 20c:	2f 91       	pop	r18
 20e:	0f 90       	pop	r0
 210:	0f be       	out	0x3f, r0	; 63
 212:	0f 90       	pop	r0
 214:	1f 90       	pop	r1
 216:	18 95       	reti

00000218 <__vector_21>:
	ADCSRA = 0;
	ADCSRA |= (1 << ADPS1) |(1<<ADPS0) | (1<< ADEN) | (1<<ADIE);
	
	
}
ISR (ADC_vect){
 218:	1f 92       	push	r1
 21a:	0f 92       	push	r0
 21c:	0f b6       	in	r0, 0x3f	; 63
 21e:	0f 92       	push	r0
 220:	11 24       	eor	r1, r1
 222:	2f 93       	push	r18
 224:	3f 93       	push	r19
 226:	4f 93       	push	r20
 228:	5f 93       	push	r21
 22a:	6f 93       	push	r22
 22c:	7f 93       	push	r23
 22e:	8f 93       	push	r24
 230:	9f 93       	push	r25
 232:	af 93       	push	r26
 234:	bf 93       	push	r27
 236:	ef 93       	push	r30
 238:	ff 93       	push	r31
 23a:	cf 93       	push	r28
 23c:	df 93       	push	r29
 23e:	cd b7       	in	r28, 0x3d	; 61
 240:	de b7       	in	r29, 0x3e	; 62
 242:	2a 97       	sbiw	r28, 0x0a	; 10
 244:	de bf       	out	0x3e, r29	; 62
 246:	cd bf       	out	0x3d, r28	; 61
	
	if (modo =='1') //Comparar si se esta en el modo del adc
 248:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 24c:	81 33       	cpi	r24, 0x31	; 49
 24e:	e9 f4       	brne	.+58     	; 0x28a <__vector_21+0x72>
	{
		valor_adc = ADCH;
 250:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 254:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <__data_end>
		char buffer[10];
		
		itoa(valor_adc, buffer, 10);
 258:	4a e0       	ldi	r20, 0x0A	; 10
 25a:	50 e0       	ldi	r21, 0x00	; 0
 25c:	be 01       	movw	r22, r28
 25e:	6f 5f       	subi	r22, 0xFF	; 255
 260:	7f 4f       	sbci	r23, 0xFF	; 255
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	0e 94 5e 01 	call	0x2bc	; 0x2bc <itoa>
		writeString("Valor ADC: ");
 268:	8d e7       	ldi	r24, 0x7D	; 125
 26a:	91 e0       	ldi	r25, 0x01	; 1
 26c:	0e 94 6f 00 	call	0xde	; 0xde <writeString>
		writeString(buffer);
 270:	ce 01       	movw	r24, r28
 272:	01 96       	adiw	r24, 0x01	; 1
 274:	0e 94 6f 00 	call	0xde	; 0xde <writeString>
		writeString("\n");
 278:	87 e2       	ldi	r24, 0x27	; 39
 27a:	91 e0       	ldi	r25, 0x01	; 1
 27c:	0e 94 6f 00 	call	0xde	; 0xde <writeString>
		
		modo ='0';
 280:	80 e3       	ldi	r24, 0x30	; 48
 282:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		mostarMenu();
 286:	0e 94 a1 00 	call	0x142	; 0x142 <mostarMenu>
	}
	
	
}
 28a:	2a 96       	adiw	r28, 0x0a	; 10
 28c:	0f b6       	in	r0, 0x3f	; 63
 28e:	f8 94       	cli
 290:	de bf       	out	0x3e, r29	; 62
 292:	0f be       	out	0x3f, r0	; 63
 294:	cd bf       	out	0x3d, r28	; 61
 296:	df 91       	pop	r29
 298:	cf 91       	pop	r28
 29a:	ff 91       	pop	r31
 29c:	ef 91       	pop	r30
 29e:	bf 91       	pop	r27
 2a0:	af 91       	pop	r26
 2a2:	9f 91       	pop	r25
 2a4:	8f 91       	pop	r24
 2a6:	7f 91       	pop	r23
 2a8:	6f 91       	pop	r22
 2aa:	5f 91       	pop	r21
 2ac:	4f 91       	pop	r20
 2ae:	3f 91       	pop	r19
 2b0:	2f 91       	pop	r18
 2b2:	0f 90       	pop	r0
 2b4:	0f be       	out	0x3f, r0	; 63
 2b6:	0f 90       	pop	r0
 2b8:	1f 90       	pop	r1
 2ba:	18 95       	reti

000002bc <itoa>:
 2bc:	45 32       	cpi	r20, 0x25	; 37
 2be:	51 05       	cpc	r21, r1
 2c0:	20 f4       	brcc	.+8      	; 0x2ca <itoa+0xe>
 2c2:	42 30       	cpi	r20, 0x02	; 2
 2c4:	10 f0       	brcs	.+4      	; 0x2ca <itoa+0xe>
 2c6:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__itoa_ncheck>
 2ca:	fb 01       	movw	r30, r22
 2cc:	10 82       	st	Z, r1
 2ce:	cb 01       	movw	r24, r22
 2d0:	08 95       	ret

000002d2 <__itoa_ncheck>:
 2d2:	bb 27       	eor	r27, r27
 2d4:	4a 30       	cpi	r20, 0x0A	; 10
 2d6:	31 f4       	brne	.+12     	; 0x2e4 <__itoa_ncheck+0x12>
 2d8:	99 23       	and	r25, r25
 2da:	22 f4       	brpl	.+8      	; 0x2e4 <__itoa_ncheck+0x12>
 2dc:	bd e2       	ldi	r27, 0x2D	; 45
 2de:	90 95       	com	r25
 2e0:	81 95       	neg	r24
 2e2:	9f 4f       	sbci	r25, 0xFF	; 255
 2e4:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__utoa_common>

000002e8 <__utoa_ncheck>:
 2e8:	bb 27       	eor	r27, r27

000002ea <__utoa_common>:
 2ea:	fb 01       	movw	r30, r22
 2ec:	55 27       	eor	r21, r21
 2ee:	aa 27       	eor	r26, r26
 2f0:	88 0f       	add	r24, r24
 2f2:	99 1f       	adc	r25, r25
 2f4:	aa 1f       	adc	r26, r26
 2f6:	a4 17       	cp	r26, r20
 2f8:	10 f0       	brcs	.+4      	; 0x2fe <__utoa_common+0x14>
 2fa:	a4 1b       	sub	r26, r20
 2fc:	83 95       	inc	r24
 2fe:	50 51       	subi	r21, 0x10	; 16
 300:	b9 f7       	brne	.-18     	; 0x2f0 <__utoa_common+0x6>
 302:	a0 5d       	subi	r26, 0xD0	; 208
 304:	aa 33       	cpi	r26, 0x3A	; 58
 306:	08 f0       	brcs	.+2      	; 0x30a <__utoa_common+0x20>
 308:	a9 5d       	subi	r26, 0xD9	; 217
 30a:	a1 93       	st	Z+, r26
 30c:	00 97       	sbiw	r24, 0x00	; 0
 30e:	79 f7       	brne	.-34     	; 0x2ee <__utoa_common+0x4>
 310:	b1 11       	cpse	r27, r1
 312:	b1 93       	st	Z+, r27
 314:	11 92       	st	Z+, r1
 316:	cb 01       	movw	r24, r22
 318:	0c 94 8e 01 	jmp	0x31c	; 0x31c <strrev>

0000031c <strrev>:
 31c:	dc 01       	movw	r26, r24
 31e:	fc 01       	movw	r30, r24
 320:	67 2f       	mov	r22, r23
 322:	71 91       	ld	r23, Z+
 324:	77 23       	and	r23, r23
 326:	e1 f7       	brne	.-8      	; 0x320 <strrev+0x4>
 328:	32 97       	sbiw	r30, 0x02	; 2
 32a:	04 c0       	rjmp	.+8      	; 0x334 <strrev+0x18>
 32c:	7c 91       	ld	r23, X
 32e:	6d 93       	st	X+, r22
 330:	70 83       	st	Z, r23
 332:	62 91       	ld	r22, -Z
 334:	ae 17       	cp	r26, r30
 336:	bf 07       	cpc	r27, r31
 338:	c8 f3       	brcs	.-14     	; 0x32c <strrev+0x10>
 33a:	08 95       	ret

0000033c <_exit>:
 33c:	f8 94       	cli

0000033e <__stop_program>:
 33e:	ff cf       	rjmp	.-2      	; 0x33e <__stop_program>
